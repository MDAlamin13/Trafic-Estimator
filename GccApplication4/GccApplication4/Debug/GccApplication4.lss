
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004c6  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800060  00800060  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042e  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c9  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000198  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028c  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fd  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 39       	cpi	r26, 0x98	; 152
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <InitADC>:
uint16_t volt6;
uint16_t volt7;

void InitADC()
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	86 b9       	out	0x06, r24	; 6
  84:	08 95       	ret

00000086 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
  86:	97 b1       	in	r25, 0x07	; 7
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  88:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  8a:	98 2b       	or	r25, r24
  8c:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  8e:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  90:	34 9b       	sbis	0x06, 4	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <ReadADC+0xa>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
  94:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	95 b1       	in	r25, 0x05	; 5
}
  9a:	08 95       	ret

0000009c <main>:

int main(void)
{
	DDRD = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  a0:	84 bb       	out	0x14, r24	; 20
	uint16_t adc_result4;
	uint16_t adc_result5;
	uint16_t adc_result6;
	uint16_t adc_result7;
	
	InitADC();
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
	present7=present6=present5=present4=present3=present2=present1=present0=0;
  a6:	10 92 85 00 	sts	0x0085, r1
  aa:	10 92 84 00 	sts	0x0084, r1
  ae:	10 92 89 00 	sts	0x0089, r1
  b2:	10 92 88 00 	sts	0x0088, r1
  b6:	10 92 73 00 	sts	0x0073, r1
  ba:	10 92 72 00 	sts	0x0072, r1
  be:	10 92 77 00 	sts	0x0077, r1
  c2:	10 92 76 00 	sts	0x0076, r1
  c6:	10 92 93 00 	sts	0x0093, r1
  ca:	10 92 92 00 	sts	0x0092, r1
  ce:	10 92 79 00 	sts	0x0079, r1
  d2:	10 92 78 00 	sts	0x0078, r1
  d6:	10 92 95 00 	sts	0x0095, r1
  da:	10 92 94 00 	sts	0x0094, r1
  de:	10 92 97 00 	sts	0x0097, r1
  e2:	10 92 96 00 	sts	0x0096, r1
	

	count0=count1=count2=count3=count4=count5=count6=count7=0;
  e6:	10 92 63 00 	sts	0x0063, r1
  ea:	10 92 62 00 	sts	0x0062, r1
  ee:	10 92 6f 00 	sts	0x006F, r1
  f2:	10 92 6e 00 	sts	0x006E, r1
  f6:	10 92 87 00 	sts	0x0087, r1
  fa:	10 92 86 00 	sts	0x0086, r1
  fe:	10 92 7b 00 	sts	0x007B, r1
 102:	10 92 7a 00 	sts	0x007A, r1
 106:	10 92 8b 00 	sts	0x008B, r1
 10a:	10 92 8a 00 	sts	0x008A, r1
 10e:	10 92 67 00 	sts	0x0067, r1
 112:	10 92 66 00 	sts	0x0066, r1
 116:	10 92 8d 00 	sts	0x008D, r1
 11a:	10 92 8c 00 	sts	0x008C, r1
 11e:	10 92 8f 00 	sts	0x008F, r1
 122:	10 92 8e 00 	sts	0x008E, r1
	
	
	roadCount1=roadCount2=roadCount3=roadCount4=0;
 126:	10 92 7d 00 	sts	0x007D, r1
 12a:	10 92 7c 00 	sts	0x007C, r1
 12e:	10 92 83 00 	sts	0x0083, r1
 132:	10 92 82 00 	sts	0x0082, r1
 136:	10 92 91 00 	sts	0x0091, r1
 13a:	10 92 90 00 	sts	0x0090, r1
 13e:	10 92 61 00 	sts	0x0061, r1
 142:	10 92 60 00 	sts	0x0060, r1
	
	PORTD=0b00000000;
 146:	12 ba       	out	0x12, r1	; 18
		adc_result0=ReadADC(0);
		// PORTD = 0b11111111;
		if( adc_result0<400)
		{
			if(present0==0){
				present0=1;
 148:	c1 e0       	ldi	r28, 0x01	; 1
 14a:	d0 e0       	ldi	r29, 0x00	; 0
		roadCount4=count1-count4;
		
		if(roadCount1>=roadCount2 && roadCount1>=roadCount3 && roadCount1>=roadCount4)PORTD=0b10101001;
		else if(roadCount2>=roadCount1 && roadCount2>=roadCount3 && roadCount2>=roadCount4) PORTD=0b10100110;
		else if((roadCount3>=roadCount2 && roadCount3>=roadCount1 && roadCount3>=roadCount4)) PORTD=0b10011010;
		else PORTD=0b01101010;
 14c:	1a e6       	ldi	r17, 0x6A	; 106
		roadCount3=count7-count5;
		roadCount4=count1-count4;
		
		if(roadCount1>=roadCount2 && roadCount1>=roadCount3 && roadCount1>=roadCount4)PORTD=0b10101001;
		else if(roadCount2>=roadCount1 && roadCount2>=roadCount3 && roadCount2>=roadCount4) PORTD=0b10100110;
		else if((roadCount3>=roadCount2 && roadCount3>=roadCount1 && roadCount3>=roadCount4)) PORTD=0b10011010;
 14e:	0f 2e       	mov	r0, r31
 150:	fa e9       	ldi	r31, 0x9A	; 154
 152:	ef 2e       	mov	r14, r31
 154:	f0 2d       	mov	r31, r0
		roadCount2=count2-count3;
		roadCount3=count7-count5;
		roadCount4=count1-count4;
		
		if(roadCount1>=roadCount2 && roadCount1>=roadCount3 && roadCount1>=roadCount4)PORTD=0b10101001;
		else if(roadCount2>=roadCount1 && roadCount2>=roadCount3 && roadCount2>=roadCount4) PORTD=0b10100110;
 156:	0f 2e       	mov	r0, r31
 158:	f6 ea       	ldi	r31, 0xA6	; 166
 15a:	ff 2e       	mov	r15, r31
 15c:	f0 2d       	mov	r31, r0
		roadCount1=count6-count0;
		roadCount2=count2-count3;
		roadCount3=count7-count5;
		roadCount4=count1-count4;
		
		if(roadCount1>=roadCount2 && roadCount1>=roadCount3 && roadCount1>=roadCount4)PORTD=0b10101001;
 15e:	09 ea       	ldi	r16, 0xA9	; 169
	roadCount1=roadCount2=roadCount3=roadCount4=0;
	
	PORTD=0b00000000;
	while(1)
	{
		InitADC();
 160:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result0=ReadADC(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result0<400)
 16a:	80 39       	cpi	r24, 0x90	; 144
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	92 07       	cpc	r25, r18
 170:	a0 f4       	brcc	.+40     	; 0x19a <main+0xfe>
		{
			if(present0==0){
 172:	20 91 84 00 	lds	r18, 0x0084
 176:	30 91 85 00 	lds	r19, 0x0085
 17a:	23 2b       	or	r18, r19
 17c:	71 f4       	brne	.+28     	; 0x19a <main+0xfe>
				present0=1;
 17e:	d0 93 85 00 	sts	0x0085, r29
 182:	c0 93 84 00 	sts	0x0084, r28
				count0++;
 186:	20 91 8e 00 	lds	r18, 0x008E
 18a:	30 91 8f 00 	lds	r19, 0x008F
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	30 93 8f 00 	sts	0x008F, r19
 196:	20 93 8e 00 	sts	0x008E, r18
		}
		else
		{
			//do nothing
		}
		if(present0==1 && adc_result0>400){
 19a:	20 91 84 00 	lds	r18, 0x0084
 19e:	30 91 85 00 	lds	r19, 0x0085
 1a2:	21 30       	cpi	r18, 0x01	; 1
 1a4:	31 05       	cpc	r19, r1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <main+0x11a>
 1a8:	81 39       	cpi	r24, 0x91	; 145
 1aa:	91 40       	sbci	r25, 0x01	; 1
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <main+0x11a>
			present0=0;
 1ae:	10 92 85 00 	sts	0x0085, r1
 1b2:	10 92 84 00 	sts	0x0084, r1
		}

		InitADC();
 1b6:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result1=ReadADC(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result1<613)
 1c0:	85 36       	cpi	r24, 0x65	; 101
 1c2:	22 e0       	ldi	r18, 0x02	; 2
 1c4:	92 07       	cpc	r25, r18
 1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <main+0x154>
		{
			if(present1==0){
 1c8:	20 91 88 00 	lds	r18, 0x0088
 1cc:	30 91 89 00 	lds	r19, 0x0089
 1d0:	23 2b       	or	r18, r19
 1d2:	71 f4       	brne	.+28     	; 0x1f0 <main+0x154>
				present1=1;
 1d4:	d0 93 89 00 	sts	0x0089, r29
 1d8:	c0 93 88 00 	sts	0x0088, r28
				count1++;
 1dc:	20 91 8c 00 	lds	r18, 0x008C
 1e0:	30 91 8d 00 	lds	r19, 0x008D
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	30 93 8d 00 	sts	0x008D, r19
 1ec:	20 93 8c 00 	sts	0x008C, r18
		}
		else
		{
			//do nothing
		}
		if(present1==1 && adc_result1>613){
 1f0:	20 91 88 00 	lds	r18, 0x0088
 1f4:	30 91 89 00 	lds	r19, 0x0089
 1f8:	21 30       	cpi	r18, 0x01	; 1
 1fa:	31 05       	cpc	r19, r1
 1fc:	39 f4       	brne	.+14     	; 0x20c <main+0x170>
 1fe:	86 36       	cpi	r24, 0x66	; 102
 200:	92 40       	sbci	r25, 0x02	; 2
 202:	20 f0       	brcs	.+8      	; 0x20c <main+0x170>
			present1=0;
 204:	10 92 89 00 	sts	0x0089, r1
 208:	10 92 88 00 	sts	0x0088, r1
		}

		
		InitADC();
 20c:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result2=ReadADC(2);
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result2<480)
 216:	80 3e       	cpi	r24, 0xE0	; 224
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	92 07       	cpc	r25, r18
 21c:	a0 f4       	brcc	.+40     	; 0x246 <main+0x1aa>
		{
			if(present2==0){
 21e:	20 91 72 00 	lds	r18, 0x0072
 222:	30 91 73 00 	lds	r19, 0x0073
 226:	23 2b       	or	r18, r19
 228:	71 f4       	brne	.+28     	; 0x246 <main+0x1aa>
				present2=1;
 22a:	d0 93 73 00 	sts	0x0073, r29
 22e:	c0 93 72 00 	sts	0x0072, r28
				count2++;
 232:	20 91 66 00 	lds	r18, 0x0066
 236:	30 91 67 00 	lds	r19, 0x0067
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	30 93 67 00 	sts	0x0067, r19
 242:	20 93 66 00 	sts	0x0066, r18
		}
		else
		{
			//do nothing
		}
		if(present2==1 && adc_result2>480){
 246:	20 91 72 00 	lds	r18, 0x0072
 24a:	30 91 73 00 	lds	r19, 0x0073
 24e:	21 30       	cpi	r18, 0x01	; 1
 250:	31 05       	cpc	r19, r1
 252:	39 f4       	brne	.+14     	; 0x262 <main+0x1c6>
 254:	81 3e       	cpi	r24, 0xE1	; 225
 256:	91 40       	sbci	r25, 0x01	; 1
 258:	20 f0       	brcs	.+8      	; 0x262 <main+0x1c6>
			present2=0;
 25a:	10 92 73 00 	sts	0x0073, r1
 25e:	10 92 72 00 	sts	0x0072, r1
		}

		InitADC();
 262:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result3=ReadADC(3);
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result3<562)
 26c:	82 33       	cpi	r24, 0x32	; 50
 26e:	22 e0       	ldi	r18, 0x02	; 2
 270:	92 07       	cpc	r25, r18
 272:	a0 f4       	brcc	.+40     	; 0x29c <main+0x200>
		{
			if(present3==0){
 274:	20 91 76 00 	lds	r18, 0x0076
 278:	30 91 77 00 	lds	r19, 0x0077
 27c:	23 2b       	or	r18, r19
 27e:	71 f4       	brne	.+28     	; 0x29c <main+0x200>
				present3=1;
 280:	d0 93 77 00 	sts	0x0077, r29
 284:	c0 93 76 00 	sts	0x0076, r28
				count3++;
 288:	20 91 8a 00 	lds	r18, 0x008A
 28c:	30 91 8b 00 	lds	r19, 0x008B
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	30 93 8b 00 	sts	0x008B, r19
 298:	20 93 8a 00 	sts	0x008A, r18
		}
		else
		{
			//do nothing
		}
		if(present3==1 && adc_result3>562){
 29c:	20 91 76 00 	lds	r18, 0x0076
 2a0:	30 91 77 00 	lds	r19, 0x0077
 2a4:	21 30       	cpi	r18, 0x01	; 1
 2a6:	31 05       	cpc	r19, r1
 2a8:	39 f4       	brne	.+14     	; 0x2b8 <main+0x21c>
 2aa:	83 33       	cpi	r24, 0x33	; 51
 2ac:	92 40       	sbci	r25, 0x02	; 2
 2ae:	20 f0       	brcs	.+8      	; 0x2b8 <main+0x21c>
			present3=0;
 2b0:	10 92 77 00 	sts	0x0077, r1
 2b4:	10 92 76 00 	sts	0x0076, r1
		}
		
		InitADC();
 2b8:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result4=ReadADC(4);
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result4<572)
 2c2:	8c 33       	cpi	r24, 0x3C	; 60
 2c4:	22 e0       	ldi	r18, 0x02	; 2
 2c6:	92 07       	cpc	r25, r18
 2c8:	a0 f4       	brcc	.+40     	; 0x2f2 <main+0x256>
		{
			if(present4==0){
 2ca:	20 91 92 00 	lds	r18, 0x0092
 2ce:	30 91 93 00 	lds	r19, 0x0093
 2d2:	23 2b       	or	r18, r19
 2d4:	71 f4       	brne	.+28     	; 0x2f2 <main+0x256>
				present4=1;
 2d6:	d0 93 93 00 	sts	0x0093, r29
 2da:	c0 93 92 00 	sts	0x0092, r28
				count4++;
 2de:	20 91 7a 00 	lds	r18, 0x007A
 2e2:	30 91 7b 00 	lds	r19, 0x007B
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	30 93 7b 00 	sts	0x007B, r19
 2ee:	20 93 7a 00 	sts	0x007A, r18
		}
		else
		{
			//do nothing
		}
		if(present4==1 && adc_result4>572){
 2f2:	20 91 92 00 	lds	r18, 0x0092
 2f6:	30 91 93 00 	lds	r19, 0x0093
 2fa:	21 30       	cpi	r18, 0x01	; 1
 2fc:	31 05       	cpc	r19, r1
 2fe:	39 f4       	brne	.+14     	; 0x30e <main+0x272>
 300:	8d 33       	cpi	r24, 0x3D	; 61
 302:	92 40       	sbci	r25, 0x02	; 2
 304:	20 f0       	brcs	.+8      	; 0x30e <main+0x272>
			present4=0;
 306:	10 92 93 00 	sts	0x0093, r1
 30a:	10 92 92 00 	sts	0x0092, r1
		}

		InitADC();
 30e:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result5=ReadADC(5);
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result5<204)
 318:	8c 3c       	cpi	r24, 0xCC	; 204
 31a:	91 05       	cpc	r25, r1
 31c:	a0 f4       	brcc	.+40     	; 0x346 <main+0x2aa>
		{
			if(present5==0){
 31e:	20 91 78 00 	lds	r18, 0x0078
 322:	30 91 79 00 	lds	r19, 0x0079
 326:	23 2b       	or	r18, r19
 328:	71 f4       	brne	.+28     	; 0x346 <main+0x2aa>
				present5=1;
 32a:	d0 93 79 00 	sts	0x0079, r29
 32e:	c0 93 78 00 	sts	0x0078, r28
				count5++;
 332:	20 91 86 00 	lds	r18, 0x0086
 336:	30 91 87 00 	lds	r19, 0x0087
 33a:	2f 5f       	subi	r18, 0xFF	; 255
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	30 93 87 00 	sts	0x0087, r19
 342:	20 93 86 00 	sts	0x0086, r18
		}
		else
		{
			//do nothing
		}
		if(present5==1 && adc_result5>204){
 346:	20 91 78 00 	lds	r18, 0x0078
 34a:	30 91 79 00 	lds	r19, 0x0079
 34e:	21 30       	cpi	r18, 0x01	; 1
 350:	31 05       	cpc	r19, r1
 352:	39 f4       	brne	.+14     	; 0x362 <main+0x2c6>
 354:	8d 3c       	cpi	r24, 0xCD	; 205
 356:	91 05       	cpc	r25, r1
 358:	20 f0       	brcs	.+8      	; 0x362 <main+0x2c6>
			present5=0;
 35a:	10 92 79 00 	sts	0x0079, r1
 35e:	10 92 78 00 	sts	0x0078, r1
		}

		InitADC();
 362:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result6=ReadADC(6);
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result6<523)
 36c:	8b 30       	cpi	r24, 0x0B	; 11
 36e:	22 e0       	ldi	r18, 0x02	; 2
 370:	92 07       	cpc	r25, r18
 372:	a0 f4       	brcc	.+40     	; 0x39c <main+0x300>
		{
			if(present6==0){
 374:	20 91 94 00 	lds	r18, 0x0094
 378:	30 91 95 00 	lds	r19, 0x0095
 37c:	23 2b       	or	r18, r19
 37e:	71 f4       	brne	.+28     	; 0x39c <main+0x300>
				present6=1;
 380:	d0 93 95 00 	sts	0x0095, r29
 384:	c0 93 94 00 	sts	0x0094, r28
				count6++;
 388:	20 91 6e 00 	lds	r18, 0x006E
 38c:	30 91 6f 00 	lds	r19, 0x006F
 390:	2f 5f       	subi	r18, 0xFF	; 255
 392:	3f 4f       	sbci	r19, 0xFF	; 255
 394:	30 93 6f 00 	sts	0x006F, r19
 398:	20 93 6e 00 	sts	0x006E, r18
		}
		else
		{
			//do nothing
		}
		if(present6==1 && adc_result6>523){
 39c:	20 91 94 00 	lds	r18, 0x0094
 3a0:	30 91 95 00 	lds	r19, 0x0095
 3a4:	21 30       	cpi	r18, 0x01	; 1
 3a6:	31 05       	cpc	r19, r1
 3a8:	39 f4       	brne	.+14     	; 0x3b8 <main+0x31c>
 3aa:	8c 30       	cpi	r24, 0x0C	; 12
 3ac:	92 40       	sbci	r25, 0x02	; 2
 3ae:	20 f0       	brcs	.+8      	; 0x3b8 <main+0x31c>
			present6=0;
 3b0:	10 92 95 00 	sts	0x0095, r1
 3b4:	10 92 94 00 	sts	0x0094, r1
		}

		InitADC();
 3b8:	0e 94 3e 00 	call	0x7c	; 0x7c <InitADC>
		adc_result7=ReadADC(7);
 3bc:	87 e0       	ldi	r24, 0x07	; 7
 3be:	0e 94 43 00 	call	0x86	; 0x86 <ReadADC>
		// PORTD = 0b11111111;
		if( adc_result7<163)
 3c2:	83 3a       	cpi	r24, 0xA3	; 163
 3c4:	91 05       	cpc	r25, r1
 3c6:	a0 f4       	brcc	.+40     	; 0x3f0 <main+0x354>
		{
			if(present7==0){
 3c8:	20 91 96 00 	lds	r18, 0x0096
 3cc:	30 91 97 00 	lds	r19, 0x0097
 3d0:	23 2b       	or	r18, r19
 3d2:	71 f4       	brne	.+28     	; 0x3f0 <main+0x354>
				present7=1;
 3d4:	d0 93 97 00 	sts	0x0097, r29
 3d8:	c0 93 96 00 	sts	0x0096, r28
				count7++;
 3dc:	20 91 62 00 	lds	r18, 0x0062
 3e0:	30 91 63 00 	lds	r19, 0x0063
 3e4:	2f 5f       	subi	r18, 0xFF	; 255
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
 3e8:	30 93 63 00 	sts	0x0063, r19
 3ec:	20 93 62 00 	sts	0x0062, r18
		}
		else
		{
			//do nothing
		}
		if(present7==1 && adc_result7>163){
 3f0:	20 91 96 00 	lds	r18, 0x0096
 3f4:	30 91 97 00 	lds	r19, 0x0097
 3f8:	21 30       	cpi	r18, 0x01	; 1
 3fa:	31 05       	cpc	r19, r1
 3fc:	39 f4       	brne	.+14     	; 0x40c <main+0x370>
 3fe:	84 3a       	cpi	r24, 0xA4	; 164
 400:	91 05       	cpc	r25, r1
 402:	20 f0       	brcs	.+8      	; 0x40c <main+0x370>
			present7=0;
 404:	10 92 97 00 	sts	0x0097, r1
 408:	10 92 96 00 	sts	0x0096, r1
		}

		roadCount1=count6-count0;
 40c:	20 91 6e 00 	lds	r18, 0x006E
 410:	30 91 6f 00 	lds	r19, 0x006F
 414:	80 91 8e 00 	lds	r24, 0x008E
 418:	90 91 8f 00 	lds	r25, 0x008F
 41c:	28 1b       	sub	r18, r24
 41e:	39 0b       	sbc	r19, r25
 420:	30 93 61 00 	sts	0x0061, r19
 424:	20 93 60 00 	sts	0x0060, r18
		roadCount2=count2-count3;
 428:	80 91 66 00 	lds	r24, 0x0066
 42c:	90 91 67 00 	lds	r25, 0x0067
 430:	40 91 8a 00 	lds	r20, 0x008A
 434:	50 91 8b 00 	lds	r21, 0x008B
 438:	84 1b       	sub	r24, r20
 43a:	95 0b       	sbc	r25, r21
 43c:	90 93 91 00 	sts	0x0091, r25
 440:	80 93 90 00 	sts	0x0090, r24
		roadCount3=count7-count5;
 444:	40 91 62 00 	lds	r20, 0x0062
 448:	50 91 63 00 	lds	r21, 0x0063
 44c:	60 91 86 00 	lds	r22, 0x0086
 450:	70 91 87 00 	lds	r23, 0x0087
 454:	46 1b       	sub	r20, r22
 456:	57 0b       	sbc	r21, r23
 458:	50 93 83 00 	sts	0x0083, r21
 45c:	40 93 82 00 	sts	0x0082, r20
		roadCount4=count1-count4;
 460:	60 91 8c 00 	lds	r22, 0x008C
 464:	70 91 8d 00 	lds	r23, 0x008D
 468:	e0 91 7a 00 	lds	r30, 0x007A
 46c:	f0 91 7b 00 	lds	r31, 0x007B
 470:	6e 1b       	sub	r22, r30
 472:	7f 0b       	sbc	r23, r31
 474:	70 93 7d 00 	sts	0x007D, r23
 478:	60 93 7c 00 	sts	0x007C, r22
		
		if(roadCount1>=roadCount2 && roadCount1>=roadCount3 && roadCount1>=roadCount4)PORTD=0b10101001;
 47c:	28 17       	cp	r18, r24
 47e:	39 07       	cpc	r19, r25
 480:	5c f0       	brlt	.+22     	; 0x498 <main+0x3fc>
 482:	24 17       	cp	r18, r20
 484:	35 07       	cpc	r19, r21
 486:	2c f0       	brlt	.+10     	; 0x492 <main+0x3f6>
 488:	26 17       	cp	r18, r22
 48a:	37 07       	cpc	r19, r23
 48c:	14 f0       	brlt	.+4      	; 0x492 <main+0x3f6>
 48e:	02 bb       	out	0x12, r16	; 18
 490:	67 ce       	rjmp	.-818    	; 0x160 <main+0xc4>
		else if(roadCount2>=roadCount1 && roadCount2>=roadCount3 && roadCount2>=roadCount4) PORTD=0b10100110;
 492:	82 17       	cp	r24, r18
 494:	93 07       	cpc	r25, r19
 496:	44 f0       	brlt	.+16     	; 0x4a8 <main+0x40c>
 498:	84 17       	cp	r24, r20
 49a:	95 07       	cpc	r25, r21
 49c:	44 f0       	brlt	.+16     	; 0x4ae <main+0x412>
 49e:	86 17       	cp	r24, r22
 4a0:	97 07       	cpc	r25, r23
 4a2:	14 f0       	brlt	.+4      	; 0x4a8 <main+0x40c>
 4a4:	f2 ba       	out	0x12, r15	; 18
 4a6:	5c ce       	rjmp	.-840    	; 0x160 <main+0xc4>
		else if((roadCount3>=roadCount2 && roadCount3>=roadCount1 && roadCount3>=roadCount4)) PORTD=0b10011010;
 4a8:	48 17       	cp	r20, r24
 4aa:	59 07       	cpc	r21, r25
 4ac:	44 f0       	brlt	.+16     	; 0x4be <main+0x422>
 4ae:	42 17       	cp	r20, r18
 4b0:	53 07       	cpc	r21, r19
 4b2:	2c f0       	brlt	.+10     	; 0x4be <main+0x422>
 4b4:	46 17       	cp	r20, r22
 4b6:	57 07       	cpc	r21, r23
 4b8:	14 f0       	brlt	.+4      	; 0x4be <main+0x422>
 4ba:	e2 ba       	out	0x12, r14	; 18
 4bc:	51 ce       	rjmp	.-862    	; 0x160 <main+0xc4>
		else PORTD=0b01101010;
 4be:	12 bb       	out	0x12, r17	; 18
 4c0:	4f ce       	rjmp	.-866    	; 0x160 <main+0xc4>

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
